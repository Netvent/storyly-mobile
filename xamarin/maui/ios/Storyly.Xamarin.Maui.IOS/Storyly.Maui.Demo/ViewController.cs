// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

namespace Storyly.Maui.Demo
{
    static class Constants
    {
        public const string StorylyToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhY2NfaWQiOjc2MCwiYXBwX2lkIjo0MDUsImluc19pZCI6NDA0fQ.1AkqOy_lsiownTBNhVOUKc91uc9fDcAxfQZtpm3nj40";
    }

    public partial class ViewController : UIViewController
    {
        public ViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            // Perform any additional setup after loading the view, typically from a nib.

            var storylyView = new StorylyView(new CGRect(0, 50, 414, 90))
            {
                StorylyInit = new StorylyInit(
                    Constants.StorylyToken,
                    new StorylyConfigBuilder().Build()),
                RootViewController = this,
                Delegate = new StorylyDelegateImpl()
            };
            View.AddSubview(storylyView);

            var storylyViewCustomization = new StorylyView(new CGRect(0, 180, 414, 130))
            {
                StorylyInit = new StorylyInit(
                    Constants.StorylyToken,
                    new StorylyConfigBuilder()
                        .SetStoryGroupStyling(new StorylyStoryGroupStylingBuilder().SetSize(StoryGroupSize.Small)
                        .SetCustomGroupViewFactory(new CustomStoryGroupViewFactory())
                            .Build())
                    .Build()),
                RootViewController = this,
                Delegate = new StorylyDelegateImpl()
            };
            View.AddSubview(storylyViewCustomization);
        }
    }

    public partial class StorylyDelegateImpl : StorylyDelegate
    {
        public override void StorylyLoaded(StorylyView storylyView, StoryGroup[] storyGroupList, StorylyDataSource dataSource)
        {
            Console.WriteLine($"StorylyLoaded:SGSize:{storyGroupList.Length}");
        }

        public override void StorylyActionClicked(StorylyView storylyView, UIViewController rootViewController, Story story)
        {
            Console.WriteLine($"StorylyActionClicked:ActionUrl:{story.ActionUrl}");
        }

        public override void StorylyEvent(StorylyView storylyView, Storyly.StorylyEvent @event, StoryGroup storyGroup, Story story, StoryComponent storyComponent)
        {
            Console.WriteLine($"StorylyEvent:StorylyEvent:");
            if (storyComponent != null)
            {
                if (storyComponent.Type == StoryComponentType.Emoji)
                {
                    StoryEmojiComponent emojiComponent = (StoryEmojiComponent)storyComponent;
                    if (emojiComponent != null)
                    {
                        Console.WriteLine($"StorylyEvent:StoryEmojiComponent:{emojiComponent.CustomPayload}");
                    }
                }
            }
        }
    }

    public class CustomStoryGroupViewFactory : StoryGroupViewFactory
    {
        public override StoryGroupView CreateView
        {
            get
            {
                return new XamarinStoryGroupView(new CustomerStoryGroup());
            }
        }
        public override CGSize GetSize
        {
            get
            {
                return new CGSize(200, 100); // Replace with your actual view size
            }
        }
    }
    public class CustomerStoryGroup : XamarinStoryGroup
    {
        private UILabel titleLabel = new UILabel()
        {
            TranslatesAutoresizingMaskIntoConstraints = false,
            TextAlignment = UITextAlignment.Center
        };

        private UIView container = new UIView()
        {
            TranslatesAutoresizingMaskIntoConstraints = false,
        };

        public override UIView CreateView
        {
            get
            {
                container.Layer.CornerRadius = 16;
                container.AddSubview(titleLabel);

                titleLabel.TopAnchor.ConstraintEqualTo(titleLabel.Superview.TopAnchor).Active = true;
                titleLabel.BottomAnchor.ConstraintEqualTo(titleLabel.Superview.BottomAnchor).Active = true;
                titleLabel.LeadingAnchor.ConstraintEqualTo(titleLabel.Superview.LeadingAnchor).Active = true;

                return container;
            }
        }
        public override void PopulateView(StoryGroup? storyGroup)
        {
            titleLabel.Text = storyGroup?.Title;
            if (storyGroup?.Seen == true)
            {
                container.BackgroundColor = UIColor.Red.ColorWithAlpha(0.5f);
            }
            else
            {
                container.BackgroundColor = UIColor.Red.ColorWithAlpha(1f);
            }
        }
    }
}
